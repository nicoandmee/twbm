---
# https://github.com/nalgeon/podsearch-py/tree/main/.github/workflows
name: build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']

    env:
      USING_COVERAGE: '3.10'

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install sqlite3
        run: |
          sudo apt update
          sudo apt upgrade
          sudo apt install tree

          sudo apt remove sqlite3
          mkdir -p bld
          pushd bld
          wget https://www.sqlite.org/src/tarball/sqlite.tar.gz
          tar xzf sqlite.tar.gz
          ./sqlite/configure --enable-all
          make
          sudo make install

          sqlite3 --version
          echo "pragma compile_options;" | sqlite3
          echo "----------------------------------------------------"
          python -c "import sqlite3; con = sqlite3.connect(':memory:'); cur = con.cursor(); cur.execute('pragma compile_options;'); available_pragmas = cur.fetchall(); con.close(); print(available_pragmas)"
          popd
          rm -fr ./bld

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox tox-gh-actions pytest black coverage

      - name: Run tox
        run: |
          # pushd /home/runner/work/twbm
          echo "--------------------------------------------------------------------------------"
          sqlite3 --version
          pwd
          tree test
          ls -al test/tests_data/bm_test.db
          find . -type d
          echo "--------------------------------------------------------------------------------"
          LD_LIBRARY_PATH=/usr/local/lib make tox
          # make tox

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        if: contains(env.USING_COVERAGE, matrix.python-version)
        with:
          fail_ci_if_error: true
